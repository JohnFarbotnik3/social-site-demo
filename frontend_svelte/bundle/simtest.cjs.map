{
  "version": 3,
  "sources": ["../../backend_api_types/types.ts", "../../backend_api_types/endpoints.ts", "../../backend_api_types/DeferredPromise.ts", "../src/application/api_simulation_test.ts"],
  "sourcesContent": ["\n// ============================================================\n// base types.\n// ------------------------------------------------------------\n\n// original code from MongoDB.WithId\nexport declare type StringId = string;\nexport declare type EnhancedOmit<TRecordOrUnion, KeyUnion> = string extends keyof TRecordOrUnion ? TRecordOrUnion : TRecordOrUnion extends any ? Pick<TRecordOrUnion, Exclude<keyof TRecordOrUnion, KeyUnion>> : never;\nexport declare type WithStringId<TSchema> = EnhancedOmit<TSchema, '_id'> & { _id: StringId; };\n\n// https://www.typescriptlang.org/docs/handbook/2/mapped-types.html\nexport type ProjectionFlags<Type> = {\n  [Property in keyof Type]?: 1 | -1;\n};\n\n// timestamp format.\nexport declare type TimeStamp = number;\nexport const NONE_TIMESTAMP = 0;\n\n\n/** a direct list of items. */\nexport type List<T> = {\n\tlist: T[];\n};\n\n// WARNING: in a production setting, this type definition should not be available to the frontend.\nexport type User = {\n\t/** timestamp of most recent update. */\n\tupdated\t\t\t: TimeStamp;\n\t/** internal name of user (unique). */\n\tusername\t\t: string;\n\t/** user's display name. */\n\tnickname\t\t: string;\n\t// WARNING: security - do not update timestamp when changing password.\n\t/** random value for generating unique password hashes. */\n\tpassword_salt\t: string;\n\t/** output from hashing together provided password and per-user password-salt. */\n\tpassword_hash\t: string;\n};\nexport type UserPatch = {\n\tusername\t\t: string;\n\tnickname\t\t: string;\n\tpassword\t\t: string;\n};\nexport type UserInfo = {\n\tupdated\t\t\t: TimeStamp;\n\tusername\t\t: string;\n\tnickname\t\t: string;\n};\n\nexport type Token = {\n\t/** a random value that should be very unlikely to guess at random.*/\n\thash\t: string;\n\t/** expirey date of token. */\n\tdate\t: number;\n};\n\nexport type Post = {\n\t/** timestamp of most recent update. */\n\tupdated\t: TimeStamp;\n\t/** date created. */\n\tcreated\t: TimeStamp;\n\t/** ID of user who created this post. */\n\tuser_id\t: StringId;\n\t/** content of post. */\n\tcontent\t: string;\n};\nexport type PostData = {\n\tuser_id\t: StringId;\n\tcontent\t: string;\n};\nexport type PostResponse = {\n\tupdated\t: TimeStamp;\n\tcreated\t: TimeStamp;\n\tuser_id\t: StringId;\n};\nexport type PostList = {\n\t/** timestamp of most recent update. */\n\tupdated\t: TimeStamp;\n\t/** post ids. */\n\tpost_ids: StringId[];\n};\n\nexport type Chat = {\n\t/** timestamp of most recent update. */\n\tupdated\t\t: TimeStamp;\n\t/** set of users who are currently members of this chat. */\n\tuser_ids\t: StringId[];\n\t/** set of posts belonging to this chat. */\n\tpost_ids\t: StringId[];\n};\n\nexport type Friend = {\n\t/** user_id of friend. */\n\tuser_id : StringId;\n\t/** chat_id of group-chat associated with friend. */\n\tchat_id\t: StringId;\n};\nexport type FriendList = {\n\t/** timestamp of most recent update. */\n\tupdated\t: TimeStamp;\n\t/** map of friends. */\n\tlist\t: Friend[];\n};\n\nexport type NotifList = {\n\t/** timestamp of most recent update. */\n\tupdated\t\t\t: TimeStamp;\n\tfriends_added\t: StringId[];\n\tfriends_removed\t: StringId[];\n\tchat_activity\t: StringId[];\n};\n\n// ============================================================\n// API request-response types.\n// ------------------------------------------------------------\n\nexport type error_response = {\n\tsuccess\t: false;\n\tmessage\t: string;\n};\n\nexport type with_token = {\n\tuser_id\t\t: StringId;\n\ttoken_hash\t: string;\n};\n\nexport type account_token_valid_request = {\n\tuser_id\t\t: string;\n\ttoken_hash\t: string;\n};\nexport type account_token_valid_response = {\n\tvalid\t: true | false;\n};\n\nexport type account_create_request = {\n\tusername: string;\n\tnickname: string;\n\tpassword: string;\n};\nexport type account_create_response = error_response | {\n\tsuccess\t: true;\n\tid\t\t: StringId;\n\ttoken\t: string;\n\tnickname: string;\n};\n\nexport type account_login_request = {\n\tusername: string;\n\tpassword: string;\n};\nexport type account_login_response = error_response | {\n\tsuccess\t: true;\n\tid\t\t: StringId;\n\ttoken\t: string;\n\tnickname: string;\n};\n\nexport type account_logout_request = {\n\tuser_id\t\t: StringId;\n\ttoken_hash\t: string;\n};\nexport type account_logout_response = {\n\tsuccess\t: boolean;\n\tmessage?: string;\n};\n\nexport type account_remove_request = {\n\tuser_id\t\t: StringId;\n\tpassword\t: string;\n};\nexport type account_remove_response = {\n\tsuccess\t: boolean;\n\tmessage?: string;\n};\n\nexport type account_update_with_token_request = {\n\tuser_id\t\t: StringId;\n\ttoken_hash\t: string;\n\tprops\t\t: Partial<UserPatch>;\n};\nexport type account_update_with_token_response = {\n\tsuccess\t: boolean;\n\tmessage?: string;\n};\n\nexport type account_update_with_password_request = {\n\tuser_id\t\t: StringId;\n\tpassword\t: string;\n\tprops\t\t: Partial<UserPatch>;\n};\nexport type account_update_with_password_response = {\n\tsuccess\t: boolean;\n\tmessage?: string;\n};\n\nexport type users_search_request = {\n\tsearch_str: string;\n};\nexport type users_search_response = {\n\tuser_ids: StringId[];\n};\n\nexport type blogs_insert_post_request = {\n\tuser_id\t\t: StringId;\n\ttoken_hash\t: string;\n\tcontent\t\t: string;\n};\nexport type blogs_insert_post_response = error_response | {\n\tsuccess\t: true;\n\tpostinfo: WithStringId<PostResponse>;\n};\n\nexport type blogs_remove_post_request = {\n\tuser_id\t\t: StringId;\n\ttoken_hash\t: string;\n\tpost_id\t\t: StringId;\n};\nexport type blogs_remove_post_response = error_response | {\n\tsuccess\t: true;\n};\n\nexport type blogs_update_post_request = {\n\tuser_id\t\t: StringId;\n\ttoken_hash\t: string;\n\tpost_id\t\t: StringId;\n\tcontent\t\t: string;\n};\nexport type blogs_update_post_response = error_response | {\n\tsuccess\t: true;\n\tpostinfo: WithStringId<PostResponse>;\n};\n\nexport type notifs_clear_request = {\n\tuser_id\t\t: StringId;\n\ttoken_hash\t: string;\n\tfriends_added\t?: StringId[];\n\tfriends_removed\t?: StringId[];\n\tchat_activity\t?: StringId[];\n};\nexport type notifs_clear_response = error_response | {\n\tsuccess: true;\n};\n\nexport type request_get_blogs\t\t= { blogs\t: StringId[]; };\nexport type request_get_posts\t\t= { posts\t: StringId[]; };\nexport type request_get_infos\t\t= { infos\t: StringId[]; } & with_token;\nexport type request_get_chats\t\t= { chats\t: StringId[]; } & with_token;\nexport type request_get_flist\t\t= {} & with_token;\nexport type request_get_notifs\t\t= {} & with_token;\nexport type response_get_blogs\t\t= error_response | { success: true; blogs\t: WithStringId<PostList>[]; };\nexport type response_get_posts\t\t= error_response | { success: true; posts\t: WithStringId<Post>[]; };\nexport type response_get_infos\t\t= error_response | { success: true; infos\t: WithStringId<UserInfo>[]; };\nexport type response_get_chats\t\t= error_response | { success: true; chats\t: WithStringId<Chat>[]; };\nexport type response_get_flist\t\t= error_response | { success: true; flist\t: WithStringId<FriendList>; };\nexport type response_get_notifs\t\t= error_response | { success: true; notifs\t: WithStringId<NotifList>; };\n\nexport type request_sync_blogs\t\t= { blogs\t: [StringId, TimeStamp][]; };\nexport type request_sync_posts\t\t= { posts\t: [StringId, TimeStamp][]; };\nexport type request_sync_infos\t\t= { infos\t: [StringId, TimeStamp][]; } & with_token;\nexport type request_sync_chats\t\t= { chats\t: [StringId, TimeStamp][]; } & with_token;\nexport type request_sync_flist\t\t= { flist\t: TimeStamp; } & with_token;\nexport type request_sync_notifs\t\t= { notifs\t: TimeStamp; } & with_token;\nexport type response_sync_blogs\t\t= error_response | { success: true; changed_blogs\t: WithStringId<PostList>[]; };\nexport type response_sync_posts\t\t= error_response | { success: true; changed_posts\t: WithStringId<Post>[]; };\nexport type response_sync_infos\t\t= error_response | { success: true; changed_infos\t: WithStringId<UserInfo>[]; };\nexport type response_sync_chats\t\t= error_response | { success: true; changed_chats\t: WithStringId<Chat>[]; };\nexport type response_sync_flist\t\t= error_response | { success: true; changed_flist\t: null | WithStringId<FriendList>; };\nexport type response_sync_notifs\t= error_response | { success: true; changed_notifs\t: null | WithStringId<NotifList>; };\n\n// ==============================\n// websockets.\n// ------------------------------\n\n// https://www.typescriptlang.org/docs/handbook/enums.html\n\nexport enum WS_CLOSE_CODE {\n\tTEST = 3000,\n\tSERVER_ERROR,\n\tWRONG_DATA_TYPE,\n\tFAILED_TO_PARSE_MESSAGE,\n\tINVALID_TOKEN,\n\tNOT_AUTHORIZED_TO_ACCESS,\n\tALREADY_COMPLETED_SETUP,\n};\n\nexport enum WS_MESSAGE_TYPE {\n\tUSER_LOGIN,\n\tUSER_LOGIN_RESPONSE,\n\tCHAT_LOGIN,\n\tCHAT_LOGIN_RESPONSE,\n\tFRIEND_ADD,\n\tFRIEND_ADD_RESPONSE,\n\tFRIEND_ADD_NOTIF,\n\tFRIEND_REM,\n\tFRIEND_REM_RESPONSE,\n\tFRIEND_REM_NOTIF,\n\tCHAT_ADD_POST,\n\tCHAT_ADD_POST_RESPONSE,\n\tCHAT_ADD_POST_EVENT,\n\tCHAT_ACTIVITY_NOTIF,\n};\n\nexport type WS_REQUEST_ID = number;\n\nexport type ws_message = {\n\t/** message type. */\n\tmtype\t: WS_MESSAGE_TYPE;\n};\n\nexport type ws_request<M_TYPE, PROPS> = {\n\t/** message type. */\n\tmtype\t\t: M_TYPE;\n\t/** id for correlating requests and responses. */\n\treq_id\t\t: WS_REQUEST_ID;\n} & PROPS;\n\nexport type ws_response<M_TYPE, PROPS> = {\n\t/** message type. */\n\tmtype\t\t: M_TYPE;\n\t/** id for correlating requests and responses. */\n\treq_id\t\t: WS_REQUEST_ID;\n\tsuccess\t\t: false;\n\tmessage\t\t: string;\n} | ({\n\t/** message type. */\n\tmtype\t\t: M_TYPE;\n\t/** id for correlating requests and responses. */\n\treq_id\t\t: WS_REQUEST_ID;\n\tsuccess\t\t: true;\n} & PROPS);\n\nexport type ws_user_login\t\t\t= ws_request <WS_MESSAGE_TYPE.USER_LOGIN, { token_hash: string; user_id: StringId; }>;\nexport type ws_user_login_response\t= ws_response<WS_MESSAGE_TYPE.USER_LOGIN_RESPONSE, {}>;\n\nexport type ws_chat_login\t\t\t= ws_request <WS_MESSAGE_TYPE.CHAT_LOGIN, { token_hash: string; user_id: StringId; chat_id: StringId; }>;\nexport type ws_chat_login_response\t= ws_response<WS_MESSAGE_TYPE.CHAT_LOGIN_RESPONSE, {}>;\n\nexport type ws_user_friend_add\t\t\t= ws_request <WS_MESSAGE_TYPE.FRIEND_ADD, { friend_id: StringId; }>;\nexport type ws_user_friend_add_response\t= ws_response<WS_MESSAGE_TYPE.FRIEND_ADD_RESPONSE, { friend:Friend }>;\nexport type ws_user_friend_add_notif\t= {\n\tmtype\t\t: WS_MESSAGE_TYPE.FRIEND_ADD_NOTIF;\n\tfriend\t\t: Friend;\n};\n\nexport type ws_user_friend_rem\t\t\t= ws_request <WS_MESSAGE_TYPE.FRIEND_REM, { friend_id: StringId; }>;\nexport type ws_user_friend_rem_response\t= ws_response<WS_MESSAGE_TYPE.FRIEND_REM_RESPONSE, { friend_id:StringId; }>;\nexport type ws_user_friend_rem_notif\t= {\n\tmtype\t\t: WS_MESSAGE_TYPE.FRIEND_REM_NOTIF;\n\tfriend_id\t: StringId;\n};\n\nexport type ws_chat_add_post\t\t\t= ws_request <WS_MESSAGE_TYPE.CHAT_ADD_POST, { content: string; }>;\nexport type ws_chat_add_post_response\t= ws_response<WS_MESSAGE_TYPE.CHAT_ADD_POST_RESPONSE, { post: WithStringId<Post>; }>;\nexport type ws_chat_add_post_event\t\t= {\n\tmtype\t: WS_MESSAGE_TYPE.CHAT_ADD_POST_EVENT;\n\tpost\t: WithStringId<Post>;\n};\n\nexport type ws_chat_activity_notif\t\t= {\n\tmtype\t\t: WS_MESSAGE_TYPE.CHAT_ACTIVITY_NOTIF;\n\tchat_id\t\t: StringId;\n};\n\n\n\n\n\n", "\n//export const hostname = \"[::1]\";\nexport const hostname = \"localhost\";\nexport const port_https = 5443;\n\nexport const ENDPOINTS = {\n\tws_chat\t: \"/ws_chat\",\n\tws_user\t: \"/ws_user\",\n\taccount_token_valid\t: \"/account_token_valid\",\n\taccount_create\t\t: \"/account_create\",\n\taccount_login\t\t: \"/account_login\",\n\taccount_logout\t\t: \"/account_logout\",\n\taccount_remove\t\t: \"/account_remove\",\n\taccount_update_with_token\t\t: \"/account_update_t\",\n\taccount_update_with_password\t: \"/account_update_p\",\n\tusers_search\t\t: \"/users_search\",\n\tblogs_insert_post\t: \"/blogs_insert_post\",\n\tblogs_remove_post\t: \"/blogs_remove_post\",\n\tblogs_update_post\t: \"/blogs_update_post\",\n\tnotifs_clear\t\t: \"/notifs_clear\",\n\tget_blogs\t: \"/get_blogs\",\n\tget_posts\t: \"/get_posts\",\n\tget_infos\t: \"/get_infos\",\n\tget_chats\t: \"/get_chats\",\n\tget_flist\t: \"/get_flist\",\n\tget_notifs\t: \"/get_notifs\",\n\tsync_blogs\t: \"/sync_blogs\",\n\tsync_posts\t: \"/sync_posts\",\n\tsync_infos\t: \"/sync_infos\",\n\tsync_chats\t: \"/sync_chats\",\n\tsync_flist\t: \"/sync_flist\",\n\tsync_notifs\t: \"/sync_notifs\",\n};\n", "\n// https://stackoverflow.com/questions/26150232/how-can-i-access-promise-resolution-callbacks-outside-the-promise-constructor-ca\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers\nexport type DeferredPromise<T> = Promise<T> & {\n\tresolve\t: (value: any) => void;\n\treject\t: (reason: any) => void;\n};\nexport function getDeferredPromise<T>(): DeferredPromise<T> {\n\tconst { promise, resolve, reject } = Promise.withResolvers<true>();\n\tObject.assign(promise, {resolve, reject});\n\treturn promise as DeferredPromise<T>;\n}\n", "import * as types from \"backend_api_types/types\";\nimport type { StringId } from \"backend_api_types/types\";\nimport { ENDPOINTS, hostname, port_https } from \"backend_api_types/endpoints\";\nimport { getDeferredPromise, type DeferredPromise } from \"backend_api_types/DeferredPromise\";\n\n\n/*\nthis simulation is for testing to ensure that the API will function correctly\nfrom the user's perspective.\n\nthis will perform fetch requests, as well as open large numbers of websockets,\nto test performance, scaling, and integrity of API.\n\nNOTE: this will test the combined-get function, but I'm not (yet) planning on testing\nthe combined-sync function here as this would require maintaining a cache-instance for each user,\nwhich will make the test implementation larger.\n(this project was only meant to be a learning experience and proof-of-concept.)\n\nNOTE: having the get/sync operations all share the same perf-group prevents telling their performance characteristics apart.\n\nNOTE: this simulation does not resemble typical site usage patterns.\na better approach would be to spawn N threads, and to have them randomly perform actions\nin some reasonable order (and with timing operation-specific gaps in between), for example:\nview posts [30s], enter chat [1s], read chat [20s], add 3 chat messages [10s], leave chat [1s], add friend [5s], ...\n\nNOTE: there are a lot of code paths not tested here that should be tested in a real\nproduction setting - particularly websocket failure paths (\"should_succeed === false\");\nhowever testing failure paths of request-response cycles over websockets will require\nsome form of request-response tracking structure (ex. request ids), which is easier said than done.\n^ however, just logging all errors and testing if client and server values all match may suffice.\n^ since there is less request processing overhead with websockets, per-feature round-trip times may not be needed.\n\tjust collecting general per-request and per-throughput websocket performance figures should be generally accurate.\n^^ the same may be true for fetch requests as well. the processing overhead across features is mostly the same.\n\n\nNOTE: I wrote this whole test all at once before testing it. that was stupid.\na much smarter approach would have been:\n1. start by outlining the basic ideas and objectives of the test.\n2. implement one simple test (testing a single fetch function, opening one kind of websocket, etc.).\n3. incrementally implement one one, then run test again, then repeat.\nhowever, this test is organized sloghtly better then the frontend-apis are,\na possible side-effect of the all-at-once approach (or perhaps just because it was my second shot at implementing them).\n\n*/\n\n// random number generating function.\n// see: https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\n// src: https://pracrand.sourceforge.net/\n\nfunction sfc32(a: number, b: number, c: number, d: number) {\n\treturn function() {\n\t\ta |= 0; b |= 0; c |= 0; d |= 0;\n\t\tlet t = (a + b | 0) + d | 0;\n\t\td = d + 1 | 0;\n\t\ta = b ^ b >>> 9;\n\t\tb = c + (c << 3) | 0;\n\t\tc = (c << 21 | c >>> 11);\n\t\tc = c + t | 0;\n\t\treturn (t >>> 0) / 4294967296;\n\t}\n}\n\nfunction basic_uniformity_test() {\n\tconst seedgen = () => (Math.random()*2**32)>>>0;\n\tconst getRand = sfc32(seedgen(), seedgen(), seedgen(), seedgen());\n\tconst buckets = new Array(10).fill(0);\n\tfor(let i=0; i<1000; i++) buckets[Math.floor(10*getRand())]++;\n\tconsole.log(buckets);\n}\n\nfunction array_swap_remove<T>(array:T[], index:number) {\n\tif(index < 0 || index >= array.length) throw(\"index out of bounds\");\n\tarray[index] = array[array.length-1];\n\treturn array.pop();\n}\n\nfunction shuffle_array_inplace<T>(arr:T[], rand:()=>number) {\n\tconst temp = new Array<T>(arr.length);\n\tfor(let x=0;x<arr.length;x++) temp[x] = arr[x];\n\tfor(let x=0;x<arr.length;x++) {\n\t\t// pick random element.\n\t\tconst ind = Math.floor(rand() * temp.length);\n\t\tarr[x] = temp[ind];\n\t\t// swap to end and pop.\n\t\ttemp[ind] = temp[temp.length-1];\n\t\ttemp.pop();\n\t}\n}\n\nfunction compare_lists<T>(a:T[], b:T[]) {\n\tif(a.length !== b.length) throw(\"lengths dont match: \"+JSON.stringify({ al:a.length, bl:b.length, a, b }));\n\tconst sa = new Set<T>(a);\n\tconst sb = new Set<T>(b);\n\tfor(const k of sa.keys()) if(!sb.has(k)) throw(\"set contents dont match: \"+JSON.stringify({ a, b }));\n}\n\nfunction try_until_truthy(func: () => any, interval: number, timeout: number, timeout_message: string) {\n\tconst prom = getDeferredPromise();\n\tconst itv = setInterval(() => {\n\t\tconst value = func();\n\t\tif(value) {\n\t\t\tclearInterval(itv);\n\t\t\tprom.resolve(value);\n\t\t}\n\t}, interval);\n\tconst tmt = setTimeout(() => {\n\t\tprom.reject(timeout_message);\n\t}, timeout);\n\treturn prom;\n}\n\ntype ClientStruct = {\n\tusername\t: string;\n\tnickname\t: string;\n\tpassword\t: string;\n\tuser_id\t\t: null | StringId;\n\ttoken_hash\t: null | string;\n\tws_user\t\t: null | ClientSocket;\n\tws_chat\t\t: null | ClientSocket;\n\tws_chat_id\t: null | StringId;\n\t// ground-truth values (expected result of get/sync requests).\n\tposts\t\t: Map<StringId, types.Post>;\n\tblog\t\t: types.PostList;\n\tchat\t\t: types.Chat;\n\tflist\t\t: types.FriendList;\n\t// local-cache values (for testing sync functions).\n\t// TODO\n};\n\n// ==============================\n// fetch functions.\n// ------------------------------\n\nconst msg_success_error = \"operation succeeded when it should not have\";\n\nasync function test_fetch<RequestT, ResponseT>(path:string, request_body:RequestT): Promise<ResponseT> {\n\tconst url = `https://${hostname}:${port_https}${path}`;\n\t//const url = `${new URL(location).origin}${path}`;\n\tconst req = {\n\t\tmethod:\"post\",\n\t\theaders: {\n\t\t\t// WARNING: content type is very important, as request body is likely to be discarded without it.\n\t\t\t// https://stackoverflow.com/questions/9177049/express-js-req-body-undefined\n\t\t\t// https://developer.mozilla.org/docs/Web/API/Headers\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody:JSON.stringify(request_body),\n\t};\n\tconst response = await fetch(url, req);\n\tconst response_body = await response.json();\n\treturn response_body;\n}\nasync function test_account_token_valid(client: ClientStruct, should_succeed: boolean) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.account_token_valid_request, types.account_token_valid_response>(ENDPOINTS.account_token_valid, {\n\t\tuser_id\t\t: client.user_id,\n\t\ttoken_hash\t: client.token_hash,\n\t});\n\tif(res.valid !== should_succeed) throw(msg_success_error);\n}\nasync function test_account_create(client: ClientStruct, should_succeed: boolean) {\n\tconst res = await test_fetch<types.account_create_request, types.account_login_response>(ENDPOINTS.account_create, {\n\t\tusername: client.username,\n\t\tnickname: client.nickname,\n\t\tpassword: client.password,\n\t});\n\tif(should_succeed && res.success) {\n\t\tconst { id, token, nickname } = res;\n\t\tclient.user_id\t\t= id;\n\t\tclient.token_hash\t= token;\n\t\tclient.nickname\t\t= nickname;\n\t}\n\tif(should_succeed && !res.success) throw(res.message);\n\tif(!should_succeed && res.success) throw(msg_success_error);\n}\nasync function test_account_login(client: ClientStruct, should_succeed: boolean) {\n\tconst res = await test_fetch<types.account_login_request, types.account_login_response>(ENDPOINTS.account_login, {\n\t\tusername: client.username,\n\t\tpassword: client.password,\n\t});\n\tif(should_succeed && res.success) {\n\t\tconst { id, token, nickname } = res;\n\t\tclient.user_id\t\t= id;\n\t\tclient.token_hash\t= token;\n\t\tclient.nickname\t\t= nickname;\n\t}\n\tif(should_succeed && !res.success) throw(res.message);\n\tif(!should_succeed && res.success) throw(msg_success_error);\n}\nasync function test_account_logout(client: ClientStruct, should_succeed: boolean) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.account_logout_request, types.account_logout_response>(ENDPOINTS.account_logout, {\n\t\tuser_id\t\t: client.user_id,\n\t\ttoken_hash\t: client.token_hash,\n\t});\n\tif(res.success !== should_succeed) throw(msg_success_error);\n}\nasync function test_compare_get_posts(client: ClientStruct, post_ids: StringId[]) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.request_get_posts, types.response_get_posts>(ENDPOINTS.get_posts, {\n\t\tposts\t\t: post_ids,\n\t});\n\tif(res.success) {\n\t\t// verify that client and server values match.\n\t\tconst posts = res.posts;\n\t\tif(!posts) throw(\"no posts\");\n\t\tfor(const post_s of posts) {\n\t\t\tconst post_c = client.posts.get(post_s._id);\n\t\t\tif(post_s.content !== post_c?.content) throw(\"post contents dont match: \"+JSON.stringify({ server:post_s, client:post_c }));\n\t\t}\n\t}\n\telse throw(res.message);\n}\nasync function test_compare_get_infos(client: ClientStruct, user_ids: StringId[], clients: Map<StringId, ClientStruct>) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.request_get_infos, types.response_get_infos>(ENDPOINTS.get_infos, {\n\t\tuser_id\t\t: client.user_id,\n\t\ttoken_hash\t: client.token_hash,\n\t\tinfos\t\t: user_ids,\n\t});\n\tif(res.success) {\n\t\t// verify that client and server values match.\n\t\tconst infos = res.infos;\n\t\tif(!infos) throw(\"no posts\");\n\t\tfor(const info_s of infos) {\n\t\t\tconst info_c = clients.get(info_s._id);\n\t\t\tif(info_s.username !== info_c?.username) throw(\"usernames dont match: \"+JSON.stringify({ server:info_s.username, client:info_c?.username }));\n\t\t\tif(info_s.nickname !== info_c?.nickname) throw(\"nicknames dont match: \"+JSON.stringify({ server:info_s.nickname, client:info_c?.nickname}));\n\t\t}\n\t}\n\telse throw(res.message);\n}\nasync function test_compare_get_blog(client: ClientStruct) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.request_get_blogs, types.response_get_blogs>(ENDPOINTS.get_blogs, {\n\t\tblogs\t\t: [client.user_id],\n\t});\n\tif(res.success) {\n\t\t// verify that client and server values match.\n\t\tif(!res.blogs) throw(\"no blogs\");\n\t\tif(res.blogs.length !== 1) throw(\"wrong blogs length: \"+JSON.stringify(res.blogs));\n\t\tconst blog_s = res.blogs[0];\n\t\tconst blog_c = client.blog;\n\t\tcompare_lists(blog_c.post_ids, blog_s.post_ids);\n\t}\n\telse throw(res.message);\n}\nasync function test_compare_get_chat(client: ClientStruct, chat_id: StringId) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.request_get_chats, types.response_get_chats>(ENDPOINTS.get_chats, {\n\t\tuser_id\t\t: client.user_id,\n\t\ttoken_hash\t: client.token_hash,\n\t\tchats\t\t: [chat_id],\n\t});\n\tif(res.success) {\n\t\t// verify that client and server values match.\n\t\tconst chat_c = client.chat;\n\t\tconst chat_s = res.chats[0];\n\t\tcompare_lists(chat_c.post_ids, chat_s.post_ids);\n\t\tcompare_lists(chat_c.user_ids, chat_s.user_ids);\n\t}\n\telse throw(res.message);\n}\nasync function test_compare_get_flist(client: ClientStruct) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.request_get_flist, types.response_get_flist>(ENDPOINTS.get_flist, {\n\t\tuser_id\t\t: client.user_id,\n\t\ttoken_hash\t: client.token_hash,\n\t});\n\tif(res.success) {\n\t\t// verify that client and server values match.\n\t\tif(!res.flist) throw(\"no flist\");\n\t\tconst flist_c = client.flist.list;\n\t\tconst flist_s = res.flist.list;\n\t\tcompare_lists(flist_c.map(f => f.user_id), flist_s.map(f => f.user_id));\n\t\tcompare_lists(flist_c.map(f => f.chat_id), flist_s.map(f => f.chat_id));\n\t}\n\telse throw(res.message);\n}\nasync function test_compare_get_notifs(client: ClientStruct) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.request_get_notifs, types.response_get_notifs>(ENDPOINTS.get_notifs, {\n\t\tuser_id\t\t: client.user_id,\n\t\ttoken_hash\t: client.token_hash,\n\t});\n\tif(res.success) {\n\t\t// verify that client and server values match.\n\t\tif(!res.notifs) throw(\"no notifs\");\n\t\t// NOTE: testing correctness of notifications is a bit involved, so I'll skip it for now.\n\t}\n\telse throw(res.message);\n}\nasync function test_compare_user_search(search_str:string) {\n\tconst res = await test_fetch<types.users_search_request, types.users_search_response>(ENDPOINTS.users_search, {\n\t\tsearch_str: search_str,\n\t});\n\tif(res.user_ids) {\n\t\t// NOTE: I opted to skip testing user search correctness as well.\n\t}\n}\nasync function test_blogs_insert_post(client: ClientStruct, content: string) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.blogs_insert_post_request, types.blogs_insert_post_response>(ENDPOINTS.blogs_insert_post, {\n\t\tuser_id\t\t: client.user_id,\n\t\ttoken_hash\t: client.token_hash,\n\t\tcontent\t\t: content,\n\t});\n\tif(res.success) {\n\t\t// update local values.\n\t\tconst postinfo = res.postinfo;\n\t\tconst post = { ...postinfo, content };\n\t\tclient.blog.post_ids.push(post._id);\n\t\tclient.posts.set(post._id, post);\n\t}\n\telse throw(res.message);\n}\nasync function test_blogs_update_post(client: ClientStruct, post_id: StringId, content: string) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.blogs_update_post_request, types.blogs_update_post_response>(ENDPOINTS.blogs_update_post, {\n\t\tuser_id\t\t: client.user_id,\n\t\ttoken_hash\t: client.token_hash,\n\t\tcontent\t\t: content,\n\t\tpost_id\t\t: post_id,\n\t});\n\tif(res.success) {\n\t\t// update local values.\n\t\tconst postinfo = res.postinfo;\n\t\tconst post = { ...postinfo, content };\n\t\tclient.posts.set(post._id, post);\n\t}\n\telse throw(res.message);\n}\nasync function test_blogs_remove_post(client: ClientStruct, post_id: StringId) {\n\tif(!client.user_id) throw(\"no user_id\");\n\tif(!client.token_hash) throw(\"no token_hash\");\n\tconst res = await test_fetch<types.blogs_remove_post_request, types.blogs_remove_post_response>(ENDPOINTS.blogs_remove_post, {\n\t\tuser_id\t\t: client.user_id,\n\t\ttoken_hash\t: client.token_hash,\n\t\tpost_id\t\t: post_id,\n\t});\n\tif(res.success) {\n\t\t// update local values.\n\t\tconst ind = client.blog.post_ids.indexOf(post_id);\n\t\tif(ind === -1) throw(\"failed to find index of post_id: \"+post_id);\n\t\tclient.blog.post_ids.splice(ind, 1);\n\t\tclient.posts.delete(post_id);\n\t}\n\telse throw(res.message);\n}\n\n// ==============================\n// websocket functions.\n// ------------------------------\n\ntype ClientSocket = WebSocket & {\n\tclient\t: ClientStruct;\n\tready\t: DeferredPromise<true>;\n};\n\n// helpers.\nfunction get_websocket(path:string) {\n\tconst url = `wss://${hostname}:${port_https}${path}`;\n\treturn new WebSocket(url);\n}\nfunction send_message<T> (socket:WebSocket, message:T) {\n\tsocket.send(JSON.stringify(message));\n}\n\n// user socket stuff.\nlet n_user_sockets_open = 0;\nlet n_user_messages_pending = 0;\nfunction test_user_socket_open (client: ClientStruct) {\n\tconst ws = get_websocket(ENDPOINTS.ws_user) as ClientSocket;\n\tws.client = client;\n\tws.ready = getDeferredPromise();\n\t// add to client.\n\tclient.ws_user = ws;\n\t// add event handlers.\n\tws.onopen\t\t= ws_user_onopen;\n\tws.onclose\t\t= ws_user_onclose;\n\tws.onerror\t\t= ws_user_onerror;\n\tws.onmessage\t= ws_user_onmessage;\n}\nfunction test_user_socket_close(client: ClientStruct) {\n\tif(!client.ws_user) throw(\"no ws_user\");\n\tclient.ws_user.close();\n\tclient.ws_user = null;\n}\nfunction ws_user_onopen\t\t(ev: Event) {\n\tn_user_sockets_open++;\n\tconst socket = ev.target as ClientSocket;\n\tif(!socket.client.user_id) throw(\"no user_id\");\n\tif(!socket.client.token_hash) throw(\"no token_hash\");\n\tsend_message<types.ws_user_login>(socket, {\n\t\tmtype\t\t: types.WS_MESSAGE_TYPE.USER_LOGIN,\n\t\treq_id\t\t: Math.random(),\n\t\ttoken_hash\t: socket.client.token_hash,\n\t\tuser_id\t\t: socket.client.user_id,\n\t});\n}\nfunction ws_user_onclose\t(ev: CloseEvent) { n_user_sockets_open--; }\nfunction ws_user_onerror\t(ev: Event) { console.error(\"ws_user_onerror\", ev); }\nfunction ws_user_onmessage\t(ev: MessageEvent) {\n\tconst socket = ev.target as ClientSocket;\n\tconst client = socket.client;\n\t// parse message.\n\tconst json_msg = JSON.parse(ev.data) as types.ws_message;\n\tconst msg_type = json_msg.mtype;\n\t// process message.\n\tif(msg_type === types.WS_MESSAGE_TYPE.USER_LOGIN_RESPONSE) {\n\t\tconst msg = json_msg as types.ws_user_login_response;\n\t\tif(msg.success)\tsocket.ready.resolve(true);\n\t\telse\t\t\tconsole.error(msg.message);\n\t}\n\tif(msg_type === types.WS_MESSAGE_TYPE.FRIEND_ADD_RESPONSE) {\n\t\tconst msg = json_msg as types.ws_user_friend_add_response;\n\t\tif(msg.success)\t{ n_user_messages_pending--; ws_user_onmessage_friend_add(client, msg.friend); }\n\t\telse\t\t\tconsole.error(msg.message);\n\t}\n\tif(msg_type === types.WS_MESSAGE_TYPE.FRIEND_REM_RESPONSE) {\n\t\tconst msg = json_msg as types.ws_user_friend_rem_response;\n\t\tif(msg.success)\tn_user_messages_pending--;\n\t\telse\t\t\tconsole.error(msg.message);\n\t}\n\tif(msg_type === types.WS_MESSAGE_TYPE.FRIEND_ADD_NOTIF) {\n\t\tconst msg = json_msg as types.ws_user_friend_add_notif;\n\t\tws_user_onmessage_friend_add(client, msg.friend);\n\t}\n\t// NOTE: some Notifications and Events are ignored for this test.\n\t/*\n\tif(msg_type === types.WS_MESSAGE_TYPE.FRIEND_REM_NOTIF) {}\n\tif(msg_type === types.WS_MESSAGE_TYPE.CHAT_ACTIVITY_NOTIF) {}\n\t*/\n}\nfunction ws_user_onmessage_friend_add(client: ClientStruct, friend: types.Friend) {\n\t// verify local user_id is already set correctly (done manually by an earlier test function).\n\tconst local_friend = client.flist.list.find(f => f.user_id === friend.user_id);\n\tif(!local_friend) throw(\"missing friend\");\n\t// set chat_id.\n\tlocal_friend.chat_id = friend.chat_id;\n}\n\n// chat socket stuff.\nlet n_chat_sockets_open = 0;\nlet n_chat_messages_pending = 0;\nfunction test_chat_socket_open (client: ClientStruct, chat_id: StringId) {\n\tconst ws = get_websocket(ENDPOINTS.ws_chat) as ClientSocket;\n\tws.client = client;\n\tws.ready = getDeferredPromise();\n\t// add to client.\n\tclient.ws_chat = ws;\n\tclient.ws_chat_id = chat_id;\n\t// add event handlers.\n\tws.onopen\t\t= ws_chat_onopen;\n\tws.onclose\t\t= ws_chat_onclose;\n\tws.onerror\t\t= ws_chat_onerror;\n\tws.onmessage\t= ws_chat_onmessage;\n}\nfunction test_chat_socket_close(client: ClientStruct) {\n\tif(!client.ws_chat) throw(\"no ws_chat\");\n\tclient.ws_chat.close();\n\tclient.ws_chat = null;\n\tclient.ws_chat_id = null;\n}\nfunction ws_chat_onopen\t\t(ev: Event) {\n\tn_chat_sockets_open++;\n\tconst socket = ev.target as ClientSocket;\n\tif(!socket.client.user_id) throw(\"no user_id\");\n\tif(!socket.client.token_hash) throw(\"no token_hash\");\n\tif(!socket.client.ws_chat_id) throw(\"no ws_chat_id\");\n\tsend_message<types.ws_chat_login>(socket, {\n\t\tmtype\t\t: types.WS_MESSAGE_TYPE.CHAT_LOGIN,\n\t\treq_id\t\t: Math.random(),\n\t\ttoken_hash\t: socket.client.token_hash,\n\t\tuser_id\t\t: socket.client.user_id,\n\t\tchat_id\t\t: socket.client.ws_chat_id,\n\t});\n}\nfunction ws_chat_onclose\t(ev: CloseEvent) { n_chat_sockets_open--; }\nfunction ws_chat_onerror\t(ev: Event) { console.error(\"ws_chat_onerror\", ev); }\nfunction ws_chat_onmessage\t(ev: MessageEvent) {\n\tconst socket = ev.target as ClientSocket;\n\tconst client = socket.client;\n\t// parse message.\n\tconst json_msg = JSON.parse(ev.data) as types.ws_message;\n\tconst msg_type = json_msg.mtype;\n\t// process message.\n\tif(msg_type === types.WS_MESSAGE_TYPE.CHAT_LOGIN_RESPONSE) {\n\t\tconst msg = json_msg as types.ws_chat_login_response;\n\t\tif(msg.success)\tsocket.ready.resolve(true);\n\t\telse\t\t\tconsole.error(msg.message);\n\t}\n\tif(msg_type === types.WS_MESSAGE_TYPE.CHAT_ADD_POST_RESPONSE) {\n\t\tconst msg = json_msg as types.ws_chat_add_post_response;\n\t\tif(msg.success)\tn_chat_messages_pending--;\n\t\telse\t\t\tconsole.error(msg.message);\n\t}\n\t// NOTE: some Notifications and Events are ignored for this test.\n\t/*\n\tif(msg_type === types.WS_MESSAGE_TYPE.ADD_POST_EVENT) {}\n\t*/\n}\n\n// messages.\nasync function test_ws_user_friend_add(clients: Map<StringId, ClientStruct>, user_id_a: StringId, user_id_b: StringId) {\n\t// update client lists.\n\tconst client_a = clients.get(user_id_a);\n\tconst client_b = clients.get(user_id_b);\n\tif(!client_a) throw(\"no client_a\");\n\tif(!client_b) throw(\"no client_b\");\n\tclient_a.flist.list.push({ user_id:user_id_b, chat_id:\"NONE_ID\" });\n\tclient_b.flist.list.push({ user_id:user_id_a, chat_id:\"NONE_ID\" });\n\t// send message to server.\n\tn_user_messages_pending++;\n\tif(!client_a.ws_user) throw(\"no client_a.ws_user\");\n\tawait client_a.ws_user.ready;\n\tsend_message<types.ws_user_friend_add>(client_a.ws_user, {\n\t\tmtype\t\t: types.WS_MESSAGE_TYPE.FRIEND_ADD,\n\t\treq_id\t\t: Math.random(),\n\t\tfriend_id\t: user_id_b,\n\t});\n}\nasync function test_ws_user_friend_rem(clients: Map<StringId, ClientStruct>, user_id_a: StringId, user_id_b: StringId) {\n\t// update client lists.\n\tconst client_a = clients.get(user_id_a);\n\tconst client_b = clients.get(user_id_b);\n\tif(!client_a) throw(\"no client_a\");\n\tif(!client_b) throw(\"no client_b\");\n\tarray_swap_remove(client_a.flist.list, client_a.flist.list.findIndex(friend => friend.user_id === user_id_b));\n\tarray_swap_remove(client_b.flist.list, client_b.flist.list.findIndex(friend => friend.user_id === user_id_a));\n\t// send message to server.\n\tn_user_messages_pending++;\n\tif(!client_a.ws_user) throw(\"no client_a.ws_user\");\n\tawait client_a.ws_user.ready;\n\tsend_message<types.ws_user_friend_rem>(client_a.ws_user, {\n\t\tmtype\t\t: types.WS_MESSAGE_TYPE.FRIEND_REM,\n\t\treq_id\t\t: Math.random(),\n\t\tfriend_id\t: user_id_b,\n\t});\n}\nasync function test_ws_chat_post_add(clients: Map<StringId, ClientStruct>, user_id: StringId, content: string) {\n\t// update local lists.\n\t// NOTE: this is skipped for now.\n\tconst client = clients.get(user_id);\n\tif(!client) throw(\"no client\");\n\t// send message to server.\n\tn_chat_messages_pending++;\n\tif(!client.ws_chat) throw(\"no client.ws_chat\");\n\tawait client.ws_chat.ready;\n\tsend_message<types.ws_chat_add_post>(client.ws_chat, {\n\t\tmtype\t\t: types.WS_MESSAGE_TYPE.CHAT_ADD_POST,\n\t\treq_id\t\t: Math.random(),\n\t\tcontent\t\t: content,\n\t});\n}\n\n// ==============================\n// test.\n// ------------------------------\n\ntest();\nasync function test() {\n\t// create random number generator.\n\tconst seedgen = () => (Math.random()*2**32) >>> 0;\n\tconst seeds = [seedgen(), seedgen(),seedgen(),seedgen()];\n\tconsole.log(\"seeds\", seeds);\n\tconst rand = sfc32(seeds[0], seeds[1], seeds[2], seeds[3]);\n\n\t// ==============================\n\t// generate accounts.\n\t// ------------------------------\n\tconst n_clients = Math.floor(rand() * 50 + 50);\n\tconsole.log(\"generating accounts\", n_clients);\n\n\tconst clients_arr: ClientStruct[] = [];\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client:ClientStruct = {\n\t\t\tusername\t: \"user_\" + x,\n\t\t\tnickname\t: \"nick_\" + x,\n\t\t\tpassword\t: \"pwd*_\" + x,\n\t\t\tuser_id\t\t: null,\n\t\t\ttoken_hash\t: null,\n\t\t\tws_user\t\t: null,\n\t\t\tws_chat\t\t: null,\n\t\t\tws_chat_id\t: null,\n\t\t\tposts\t\t: new Map(),\n\t\t\tblog\t\t: { updated:types.NONE_TIMESTAMP, post_ids:[] },\n\t\t\tchat\t\t: { updated:types.NONE_TIMESTAMP, post_ids:[], user_ids:[] },\n\t\t\tflist\t\t: { updated:types.NONE_TIMESTAMP, list:[] },\n\t\t};\n\t\tclients_arr.push(client);\n\t}\n\n\t// create accounts.\n\tconsole.log(\"create accounts.\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tconst clients_map = new Map<StringId, ClientStruct>();\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tif(!client) console.error(\"missing client\", x, clients_arr, clients_arr[x]);\n\t\tawait test_account_create(client, true);\n\t\tif(!client.user_id) throw(\"no user_id\");\n\t\tclients_map.set(client.user_id, client);\n\t}\n\n\t// verify all users have user_ids.\n\tconsole.log(\"verify all users have user_ids.\");\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tif(!client.user_id) throw(\"client missing user_id: \"+JSON.stringify(client));\n\t}\n\n\t// try creating accounts with already existing usernames.\n\tconsole.log(\"try creating accounts with already existing usernames.\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tif(rand() < 0.1) await test_account_create(client, false);\n\t}\n\n\t// perform login-logout cycles.\n\tconsole.log(\"perform login-logout cycles.\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tawait test_account_logout(client, true);\n\t\tawait test_account_token_valid(client, false);\n\t\tawait test_account_login(client, true);\n\t\tawait test_account_token_valid(client, true);\n\t}\n\n\t// open user sockets.\n\tconsole.log(\"open user sockets.\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\ttest_user_socket_open(client);\n\t}\n\n\t// wait until all sockets are ready.\n\tconsole.log(\"wait until all user sockets are ready.\");\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tif(!client.ws_user) throw(\"no socket\");\n\t\tawait client.ws_user.ready;\n\t}\n\n\t// modify account info with token and with password.\n\t// TODO\n\n\t// ==============================\n\t// generate random blog posts.\n\t// ------------------------------\n\n\tconsole.log(\"\");\n\tlet n_posts = 0;\n\tfor(let z2=0;z2<5;z2++) {\n\t\t// randomly insert, update, or remove posts.\n\t\tconsole.log(\"randomly insert, update, or remove posts.\");\n\t\tfor(let z1=0;z1<9;z1++) {\n\t\t\tshuffle_array_inplace(clients_arr, rand);\n\t\t\tfor(let x=0;x<n_clients;x++) {\n\t\t\t\tconst client = clients_arr[x];\n\t\t\t\tconst r = rand();\n\t\t\t\tif(0.0 <= r && r < 0.6) {\n\t\t\t\t\tconst content = \"post_\" + n_posts++;\n\t\t\t\t\tawait test_blogs_insert_post(client, content);\n\t\t\t\t}\n\t\t\t\tif(0.6 <= r && r < 0.8 && client.posts.size > 0) {\n\t\t\t\t\tconst posts = [...client.posts.keys()];\n\t\t\t\t\tconst post_id = posts[Math.floor(rand() * posts.length)];\n\t\t\t\t\tconst content = \"post_\" + n_posts++;\n\t\t\t\t\tawait test_blogs_update_post(client, post_id, content);\n\t\t\t\t}\n\t\t\t\tif(0.8 <= r && r < 1.0 && client.posts.size > 0) {\n\t\t\t\t\tconst posts = [...client.posts.keys()];\n\t\t\t\t\tconst post_id = posts[Math.floor(rand() * posts.length)];\n\t\t\t\t\tawait test_blogs_remove_post(client, post_id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// verify blogs and posts are correct.\n\t\tconsole.log(\"verify blogs and posts are correct.\");\n\t\tshuffle_array_inplace(clients_arr, rand);\n\t\tfor(let x=0;x<n_clients;x++) {\n\t\t\tconst client = clients_arr[x];\n\t\t\tawait test_compare_get_blog(client);\n\t\t\tawait test_compare_get_posts(client, client.blog.post_ids);\n\t\t}\n\t}\n\n\t// ==============================\n\t// generate friend pairs.\n\t// ------------------------------\n\n\t// add friends.\n\tconsole.log(\"add friends.\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tconst R = Math.floor(rand() * rand() * 100);\n\t\tfor(let r=0;r<R;r++) {\n\t\t\tconst ind = Math.floor(rand() * n_clients);\n\t\t\tconst uid_a = client.user_id as StringId;\n\t\t\tconst uid_b = clients_arr[ind].user_id as StringId;\n\t\t\t// skip if self.\n\t\t\tif(uid_a === uid_b) continue;\n\t\t\t// skip if friend already added.\n\t\t\tif(client.flist.list.find(friend => friend.user_id === uid_b)) continue;\n\t\t\t// add friend.\n\t\t\tawait test_ws_user_friend_add(clients_map, uid_a, uid_b);\n\t\t}\n\t}\n\n\t// remove some friends.\n\t// TODO\n\n\t// wait some time for messages to be sent and responded to.\n\tawait try_until_truthy(() => { return n_user_messages_pending === 0; }, 50, 5000, \"took too long to finish ws_user message request-response cycles.\");\n\n\t// verify after adding friends than each user's returned friends-list is correct.\n\tconsole.log(\"verify after adding friends than each user's returned friends-list is correct.\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tawait test_compare_get_flist(client);\n\t}\n\n\t// make sure each user can get their friends user-infos correctly.\n\tconsole.log(\"make sure each user can get their friends user-infos correctly.\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tconst ids = client.flist.list.map(friend => friend.user_id);\n\t\tawait test_compare_get_infos(client, ids, clients_map);\n\t}\n\n\t// ==============================\n\t// generate random chat posts.\n\t// ------------------------------\n\n\t// randomly pick which chat each user is in.\n\tconsole.log(\"randomly pick which chat each user is in.\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tif(client.flist.list.length === 0) continue;\n\t\tconst chat_id = client.flist.list[Math.floor(client.flist.list.length * rand())].chat_id;\n\t\ttest_chat_socket_open(client, chat_id);\n\t}\n\n\t// wait until all sockets are ready.\n\tconsole.log(\"wait until all chat sockets are ready.\");\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tif(!client.ws_chat) throw(\"no socket\");\n\t\tawait client.ws_chat.ready;\n\t}\n\n\t// have all users post something.\n\tconsole.log(\"have all users post something.\");\n\tfor(let z=0;z<5;z++){\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tconst user_id = client.user_id as StringId;\n\t\tconst content = \"post_\" + n_posts++;\n\t\tawait test_ws_chat_post_add(clients_map, user_id, content);\n\t}\n\t}\n\n\t// wait some time for messages to be sent and responded to.\n\tconsole.log(\"wait for all chat messages to be sent.\");\n\tawait try_until_truthy(() => { return n_chat_messages_pending === 0; }, 50, 5000, \"took too long to finish ws_chat message request-response cycles.\");\n\n\t// leave chats.\n\tconsole.log(\"leave chats.\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\ttest_chat_socket_close(client);\n\t}\n\n\t// wait some time for chat sockets to close.\n\tconsole.log(\"wait for chat sockets to close.\");\n\tawait try_until_truthy(() => { return n_chat_sockets_open === 0; }, 50, 5000, \"took too long to finish closing chat-sockets.\");\n\n\n\t// make sure all other users either recieved (correct) posts, or (correct) notifications.\n\t// TODO\n\n\t// ==============================\n\t// cleanup.\n\t// ------------------------------\n\n\t// close user sockets.\n\tconsole.log(\"close user sockets.\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\ttest_user_socket_close(client);\n\t}\n\n\t// wait some time for user sockets to close.\n\tconsole.log(\"wait for user sockets to close.\");\n\tawait try_until_truthy(() => { return n_user_sockets_open === 0; }, 50, 5000, \"took too long to finish closing user-sockets.\");\n\n\t// ==============================\n\t// consistency checks.\n\t// ------------------------------\n\n\tconsole.log(\"consistency checks.\");\n\tif(n_user_sockets_open !== 0) throw(\"n_open_user_sockets !== 0: \"+JSON.stringify(n_user_sockets_open));\n\tif(n_chat_sockets_open !== 0) throw(\"n_chat_sockets_open !== 0: \"+JSON.stringify(n_chat_sockets_open));\n\tif(n_user_messages_pending !== 0) throw(\"n_user_messages_pending !== 0: \"+JSON.stringify(n_user_messages_pending));\n\tif(n_chat_messages_pending !== 0) throw(\"n_chat_messages_pending !== 0: \"+JSON.stringify(n_chat_messages_pending));\n\n\t// check unused functions to make sure they work.\n\t/*\n\tconsole.log(\"compare chats\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tfor(const friend of client.flist.list) await test_compare_get_chat(client, friend.chat_id);\n\t}\n\t*/\n\tconsole.log(\"compare notifs\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tawait test_compare_get_notifs(client);\n\t}\n\tconsole.log(\"compare user-search\");\n\tshuffle_array_inplace(clients_arr, rand);\n\tfor(let x=0;x<n_clients;x++) {\n\t\tconst client = clients_arr[x];\n\t\tconst len = Math.max(4, client.username.length * rand());\n\t\tconst str = client.username.substring(0, len);\n\t\tawait test_compare_user_search(str);\n\t}\n\n\t// ==============================\n\t// performance tests.\n\t// ------------------------------\n\n\t// test general round-trip time of fetch requests.\n\t// TODO - N = 100K.\n\n\t// test general round-trip time of ws requests.\n\t// TODO - N = 100K.\n\n\n}\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": []
}
