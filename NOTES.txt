
MAJOR FLAW - integrity
	if an API operation requires multiple db sub-operations, and one of them fails midway,
	the sub-operations before it are still committed, leaving the DB in an inconsistent state.
FIX
	learn how to do proper db transactions with mongoDB, wherein transaction is only committed
	if all sub-operations are successful.
...


MAJOR_FLAW - security
	many "get" operations do not verify the provided ids are valid,
	so a user could potentially provide a mongoDB-specific injection.
FIX
	validate that every field is used/parsed safely, in particular "_id" values or arrays.
...


MINOR FLAW - list scaling performance
	if a chat accumulates 10^6 or more posts, list fetches will be expensive
	(since the list will contain 10^6 post_ids) and insert/remove operations will lag.
FIX
	if there is > 1000 post_ids in a list, transfer the oldest 100 into a "post-archive".
	in theory these will only be accessed when a user goes way back in a chat/post history.

	a post-archive may contain the content of the posts directly,
	allowing removal from the posts table, which we should do anyways to keep it small.

	a post-archive should have a date-range so that archives can be sorted and searched easily.
TRADE-OFF
	potentially significant increase in complexity, just to address an edge case.
	most users on a typical social media platform are "light users" and dont reach 10^3 posts/chat-messages.
...


SECURITY FLAW - mixed chats/posts, fetching any chat-post/blog-post.
	chat-messages and user-posts share the same table, meaning the table will be larger.

	this is also a security issue as a token isnt required to fetch posts,
	so an attacker could get chat-posts they arent supposed to (if they successfully guess their IDs).
FIX
	chat-messages and blog-posts should be in seperate tables,
	and chat posts should include the chat_id of the chat they belong to.

	this will also allow checking if a user is trying to fetch posts from
	a group-chat they arent a member of.
...


MAJOR ARCHITECTURE PREFERENCE
	instead of using MongoDB and having shared tables for all users,
	SQLite could be used, and each individual user could be given a seperate SQLite file.
	could make stuff a lot simpler, and a lot faster.
	also less dependencies and security risks.

	for shared collections of posts, such as a group-chat,
	each group-chat can get its own file.
...


CACHING IMPROVEMENT - immutable posts.
	- small items like posts should be made immutable (and ordered),
	such that it recieves a new ID when edited, and the old item is removed.
	this would allow simple cached items like Posts to remain valid indefinitely.

	- "date_updated" should also be updated, but if a "date_created" field exists,
	it should be inherited from the old item.

	* SYNCING:
	large items, for example lists (Chats and Blogs for example) should be mutable.
	when they are edited, "date_updated" will be changed.
	sync-style requests send the ID of the item, as well as the "date_updated"
	from the copy the client-side has cached. if the "date_updated" doesnt match,
	then respond with the new item, else respond with null or nothing.
...


FRIEND REQUESTS - should have consent
	currently, clicking "add friend" automatically creates a friend pair.
	in real life, the other person in the pair has to accept the friend request
	before the pair is added.

	i've skipped implementing that in the interest of getting this fullstack demo completed quicker.
...


FRIEND IMPLEMENTATION IS WEIRD + GROUP CHAT REMOVAL
	my original idea of adding friends and creating 2-person group chats may be a bit awkward,
	and although group chats were designed to have any number of users, there is currently no
	mechanism for joining/leaving group chats.

	the way other sites (ex. Discord) do it is you create a group chat, then you invite other users into it.

	also, group chats should only be removed once the last person leaves the chat,
	rather than when only one of the participants leaves, as is the case with my current friends implementation.

	in order to list group chats properly though, I will need each user to have a chat-list containing the ids
	of all the chats they participate in. leaving/joining chats should update both the user-chatid-list, and the chat-userid-list.
...


LOGGING INTO WEBSOCKETS
	* stackoverflow says that when using wss protocol, URL is not in plaintext.
	? does this mean I can safely send usn+pwd as query params?
	https://stackoverflow.com/questions/31564432/websocket-security
...


CACHE DESIGN AND ACCESS
	for long term caching (and maintainability), it would be very helpful to combine
	all user+cached data into a single struct (similar to how <api_simulation_test> is structured).

	then, to allow multiple accounts on the frontend, the strategy would be to have one client-cache-instance per user account,
	as well as an anonymous instance for using when not logged in.

	for local privacy, I would need to have the user cache instances be encrypted in storage,
	and then a decrypted copy in memory for the application to use.
	this will require well written code to keep client-storage, client-memory, and server in sync with eachother;
	but it provide *significant* reductions in server load, potentially allowing a single machine running
	a well written SQLite + Rust server to serve millions of active clients.
...



